use Sparky::JobApi;
use HTTP::Tiny;
use YAMLish;
use Data::Dump;

class Pipeline does Sparky::JobApi::Role {

  has Str $.project = %*ENV<PROJECT> || "";
  has Str $.worker = %*ENV<WORKER> || tags()<worker> || "";
  has Str $.scm = %*ENV<SCM> || "";
  has Str $.git-sha = %*ENV<GIT_SHA> || "";
  has Str $.scm-dir = tags()<scm-dir> || "";
  has Str $.notify-api = %*ENV<NOTIFY_API> || "";
  has Str $.notify-project = %*ENV<NOTIFY_PROJECT> || "";
  has Str $.notify-job = %*ENV<NOTIFY_JOB> || "";
  has Str $.sparkyci-yaml = tags()<sparkyci-yaml> || "";

  method stage-init {

    say "load .sparkyci.yaml from {$.sparkyci-yaml}";

    my $yaml = $.sparkyci-yaml.IO.slurp;

    my $sci-conf-raw = load-yaml($yaml);

    die $sci-conf-raw.Execption if $sci-conf-raw.WHAT === Failure;

    #say $sci-conf-raw;

    my $variables = $sci-conf-raw<init><variables> ?? $sci-conf-raw<init><variables>  !! {}; 

    say "variables loaded: ", $variables.perl; 

    $yaml = $yaml.subst(/ '$' (\S+)  /, { $variables{$0} || "" }, :g );

    say "processed yaml: \n{$yaml}";

    say "load processed yaml ...";

    my $sci-conf = load-yaml($yaml);

    my $j = Sparky::JobApi.new( mine => True );

    $j.put-stash($sci-conf);

    my $profile = "{%*ENV<HOME>}/.profile";

    say "add environment variables into $profile";

    unless my $fh = open "$profile", :a {
      die "Could not open '$profile': {$fh.exception}";
    }

    for $variables.kv -> $k, $v {
      say "export {$k}={$v}";
      $fh.say("export {$k}='{$v}'");
    }

    $fh.close;

    for $sci-conf<init><packages>.kv || () -> $p,$params {
      say "install package {$p}";
      say "params: {$params.perl}";
      task-run "package {$p}", "sparkyci-package-{$p}", $params;
    }

    for $sci-conf<init><services>.kv || () -> $s,$params {
      say "install service {$s}";
      say "params: {$params.perl}";    
      task-run "service {$s}", "sparkyci-service-{$s}", $params;
    }

    if $sci-conf<init><script> {
      bash $sci-conf<init><script>, %(
        description => "init.script",
        cwd => $.scm-dir,
      );
    }

  }

  method stage-test {

      say "scm: {$.scm}";
      say "scm-dir: {$.scm-dir}";
      say "git-sha: {$.git-sha}";

      my $sparkyci-conf = Sparky::JobApi.new( mine => True ).get-stash;

      if $sparkyci-conf<main> && $sparkyci-conf<main><build> && $sparkyci-conf<main><build><pre> {

         bash $sparkyci-conf<main><build><pre>, %(
          cwd => $.scm-dir,
          description => "main.build.pre"
        );

      } 
      zef "App::RaCoCo", %(
          description => "install App::RaCoCo",
          notest => True 
      );

      zef "App::Prove6", %(
          description => "install prove6",
          notest => True
      );

      bash "zef install --deps-only --test-depends --/test . 2>&1", %(
        cwd => $.scm-dir,
        description => "install deps"
      );
    
      if "{$.scm-dir}/Build.pm".IO ~~ :f {
        bash "zef build . 2>&1", %(
          cwd => $.scm-dir,
          description => "zef build"
        );
      }

      if "{$.scm-dir}/Build.rakumod".IO ~~ :f {
        bash "zef build . 2>&1", %(
          cwd => $.scm-dir,
          description => "zef build"
        );
      }

      if "{$.scm-dir}/Build.pm6".IO ~~ :f {
        bash "zef build . 2>&1", %(
          cwd => $.scm-dir,
          description => "zef build"
        );
      }

      bash "racoco -l --html 2>&1", %(
        cwd => $.scm-dir,
        description => "run tests"
      );

      my $j = self.new-job: :mine(True);

      $j.put-stash({
        test-coverage-html => ("{$.scm-dir}/.racoco/report.html".IO ~~ :e ?? "{$.scm-dir}/.racoco/report.html".IO.slurp !! ""),
      });
  }


  method stage-main {

      say "run raku build for scm: {$.scm} !";

      directory "scm";

      git-scm $.scm, %(
        to => "scm",
        branch => $.git-sha,
      );

      my $git-data = task-run "git data", "git-commit-data", %(
        dir => "{$*CWD}/scm",
      );

      # notify job
      my $nj = self.new-job:
        :api($.notify-api),
        :project($.notify-project),
        :job-id($.notify-job);

      my $init-log;

      my $sparkyci-conf = {};

      if "{$*CWD}/scm/.sparkyci.yaml".IO ~~ :e {

        # init job 
        my $j = self.new-job;

        my $sparkyci-yaml = "{$*CWD}/scm/.sparkyci.yaml";

        $j.queue({
          description => "init",
          tags => %(
            stage => "init",
            sparkyci-yaml => $sparkyci-yaml,
            scm-dir => "{$*CWD}/scm",
          ),
        });

        my $s = self.wait-job($j);

        $sparkyci-conf = $j.get-stash() || {};

        my %j = $j.info;

        my $r = HTTP::Tiny.get: "http://127.0.0.1:4000/report/raw/{%j<project>}/{%j<job-id>}";

        $init-log = $r<content> ?? $r<content>.decode !! '';

        if $s<FAIL> or $s<TIMEOUT> {
          $nj.put-stash({
            status => "FAIL",
            init-log => $init-log,
            test-coverage-html => "",
            raku-env => {},
            git-data => $git-data,
          });
          $nj.queue({
            description => "{$.project} - build report",
            tags => %(
              stage => "notify",
              worker => $.worker,
            ),
          });
          die;
        }
      } else {
          $init-log = "no .sparkyci.yaml file found"
      }

      my $j = self.new-job;

      $j.put-stash($sparkyci-conf);

      $j.queue({
        description => "test",
        tags => %(
          stage => "test",
          scm-dir => "{$*CWD}/scm",
        ),
      });


      my $s = self.wait-job($j, %( timeout => 1000 ));

      my %j = $j.info;

      my $r = HTTP::Tiny.get: "http://127.0.0.1:4000/report/raw/{%j<project>}/{%j<job-id>}";

      my $log = $r<content> ?? $r<content>.decode !! '';

      my $test-coverage-html = $j.get-stash()<test-coverage-html> || ""; 

      my $raku-env = task-run "dump info", "raku-env-info";

      if $s<OK> {
        $nj.put-stash({ 
          status => "OK", 
          init-log => $init-log,
          log => $log, 
          test-coverage-html => $test-coverage-html,
          raku-env => $raku-env,
          git-data => $git-data,
        });
      } elsif $s<FAIL> {
        $nj.put-stash({ 
          status => "FAIL", 
          init-log => $init-log,
          log => $log, 
          test-coverage-html => $test-coverage-html,
          raku-env => $raku-env,
          git-data => $git-data,
        });
      } elsif $s<TIMEOUT> {
        $nj.put-stash({
          status => "TIMEOUT",
          init-log => $init-log,
          log => $log,
          test-coverage-html => $test-coverage-html,
          raku-env => $raku-env,
          git-data => $git-data,
        });
      }

      $nj.queue({
        description => "{$.project} - build report",
        tags => %(
          stage => "notify",
          worker => $.worker,
        ),
      });
      
  }

  method stage-notify {

    my $nj = self.new-job: :mine(True);

    my $report = $nj.get-stash();

    say "=========================";

    say "status: ", $report<status>;

    say "log: ", $report<log>;

    bash "az container delete -g sparky2 --name {$.worker} -y -o table || echo", %(
      description => "delete container";
    );

    die unless $report<status> eq "OK";

  }

}

Pipeline.new.run;  
