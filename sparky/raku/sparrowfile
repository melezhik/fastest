use Sparky::JobApi;
use HTTP::Tiny;

class Pipeline does Sparky::JobApi::Role {

  has Str $.scm = %*ENV<scm> || "";
  has Str $.worker = %*ENV<WORKER> || tags()<worker>;
  has Str $.notify-api = %*ENV<NOTIFY_API> || "";
  has Str $.notify-project = %*ENV<NOTIFY_PROJECT> || "";
  has Str $.notify-job = %*ENV<NOTIFY_JOB> || "";

  method stage-test {

      zef "App::RaCoCo", %(
          description => "install App::RaCoCo",
          notest => True 
      );

      zef "App::Prove6", %(
          description => "install prove6",
          notest => True
      );

      directory "scm";

      git-scm $.scm, %(
        to => "scm"
      );

      bash "zef install --deps-only --/test .", %(
        cwd => "{$*CWD}/scm",
        description => "install deps"
      );
    
      bash "racoco -l --html", %(
        cwd => "{$*CWD}/scm",
        description => "run tests"
      );

      my $j = self.new-job: :mine(True);

      $j.put-stash({
        test-coverage-html => "scm/.racoco/report.html".IO.slurp(),
      });
  }


  method stage-main {

      my $j = self.new-job;

      $j.queue({
        description => "test",
        tags => %(
          stage => "test
          scm => $.scm,"
        ),
      });


      my $s = self.wait-job($j);

      my $nj = self.new-job: 
        :api($.notify-api), 
        :project($.notify-project), 
        :job-id($.notify-job);


      my %j = $j.info;

      my $r = HTTP::Tiny.get: "http://127.0.0.1:4000/report/raw/{%j<project>}/{%j<job-id>}";

      my $log = $r<content> ?? $r<content>.decode !! '';

      my $test-coverage-html = $j.get-stash()<test-coverage-html> || ""; 

      if $s<OK> {
        $nj.put-stash({ 
          status => "OK", 
          log => $log, 
          test-coverage-html => $test-coverage-html 
        });
      } else {
        $nj.put-stash({ 
          status => "FAIL", 
          log => $log,  
          test-coverage-html => $test-coverage-html 
        });
      }

      $nj.queue({
        description => "{$.worker} raku build report",
        tags => %(
          stage => "notify",
          worker => $.worker
        ),
      });
      
  }

  method stage-notify {

    my $nj = self.new-job: :mine(True);

    my $report = $nj.get-stash();

    say "=========================";

    say "status: ", $report<status>;

    say "log: ", $report<log>;

    say "test-coverage-html: ", $report<test-coverage-html>;

    bash "az container delete -g sparky2 --name spk-0{$.worker} -y -o table || echo", %(
      description => "delete container";
    );

  }

}

Pipeline.new.run;  
